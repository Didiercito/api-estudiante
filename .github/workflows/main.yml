name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  DOCKER_IMAGE_NAME: didi567/api-automatica
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test || echo "No tests defined yet"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to AWS EC2
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USERNAME }}
        key: ${{ secrets.AWS_EC2_SSH_KEY }}
        script: |
          # Stop existing containers
          docker-compose down || true
          
          # Pull latest images
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Create .env file with environment variables
          cat > .env << EOF
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          PORT=3000
          EOF
          
          # Update docker-compose to use the new image
          sed -i 's|build: \.|image: ${{ env.DOCKER_IMAGE_NAME }}:latest|g' docker-compose.yml
          
          # Start containers
          docker-compose up -d
          
          # Run database migrations
          echo "Running database migrations..."
          docker-compose exec -T api npm run migrate || echo "No migrations to run"
          
          # Health check
          sleep 10
          curl -f http://localhost:3000/health || echo "Health check failed"
